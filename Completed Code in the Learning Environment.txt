
#Project: Biodiversity for the National Parks
#Load species_info.csv
species = pd.read_csv('species_info.csv')
print(species.head())
#The dataframe 'species' contains columns: category, scientific_name, common_names, conservation_status


#Inspected the DataFrame
species_count = species.scientific_name.nunique()
print('There are {} different species'.format(species_count))
#There are 5541 different species
species_type = species.category.unique()
print('Categories: {}'.format(species_type))
#Categories: ['Mammal' 'Bird' 'Reptile' 'Amphibian' 'Fish' 'Vascular Plant' 'Nonvascular Plant']
conservation_statuses = species.conservation_status.unique()
print('Values of conservation statuses: {}'.format(conservation_statuses))
#Values of conservation statuses: [nan 'Species of Concern' 'Endangered' 'Threatened' 'In Recovery']


#Analyze Species Conservation Status
#How many scientific_name falls into each conservation_status criteria:
conservation_counts = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print('\nHow many of each species fall into these conservation statuses: {}'.format(conservation_counts))
#Endangered- 15, In Recovery-4, Species of Concern-151, Threatened-10


#Analyze Conservation Status II
#Replace NaN in our DataFrame with 'No Intervention':
species.fillna('No Intervention', inplace = True)
#How many scientific_name falls now into each conservation_status criteria:
conservation_counts_fixed = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print('\nHow many of each species fall into these conservation statuses(fixed): {}'.format(conservation_counts_fixed))
#Endangered-15, In Recovery-4, No Intervention-5363, Species of Concern-151, Threatened-10


#Plotting Conservation Status by Species
protection_counts = species.groupby('conservation_status')\
    .scientific_name.nunique().reset_index()\
    .sort_values(by='scientific_name')
plt.figure(figsize=(10,4))
ax = plt.subplot()
plt.bar(range(len(protection_counts.conservation_status)),
        protection_counts.scientific_name)
ax.set_xticks(range(len(protection_counts.conservation_status)))
ax.set_xticklabels(protection_counts.conservation_status)
plt.ylabel('Number of Species')
plt.title('Conservation Status by Species')
plt.savefig("Conservation_Status_By_Species.png")
plt.show()


#Investigating Endangered Species
#Are certain types of species more likely to be endangered?
#Create a new column called 'is_protected', which is True if conservation_status is not equal to 'No Intervention', and False otherwise
is_protected = lambda x: False \
	  if x == 'No Intervention' \
  	  else True
species['is_protected'] = species.conservation_status.apply(is_protected)
category_counts = species.groupby(['category', 'is_protected']).scientific_name.nunique().reset_index()
print(category_counts.head())

#Create a pivot table to view this data
category_pivot = category_counts.pivot(columns = 'is_protected', index = 'category', values = 'scientific_name').reset_index()
print(category_pivot)

#Add a new column percent_protected
category_pivot.columns = ['category', 'not_protected', 'protected']
category_pivot['percent_protected'] = category_pivot.protected / (category_pivot.not_protected + category_pivot.protected) * 100
print(category_pivot)


#Chi-Squared Test for Significance
#Is the difference between Bird and Mammal significant?
#Contingency table:
#           protected | not_protected
#    ----+------------+------------
#  Mammal|	 30   |	  146
#  Bird  |  	 75   |	  413
contingency = [[30, 146],
     	       [75, 413]]
from scipy.stats import chi2_contingency
chi2, pval, dof, expected = chi2_contingency(contingency)
print('\nThe p-value for Mammal and Bird: {}'.format(pval))
#The p-value for Mammal and Bird: 0.687594809666
# pval > 0.05 - No significant difference

#Is the difference between Reptile and Mammal significant?
#Contingency table:
#           protected   | not_protected
#    ------+------------+------------
#  Mammal  |	 30     |	146
#  Reptile |  	 5      |	73 
contingency_2 = [[30, 146],
     		 [5, 73]]
chi2, pval_reptile_mammal, dof, expected = chi2_contingency(contingency_2)
print('\nThe p-value for Mammal and Reptile: {}'.format(pval_reptile_mammal))
#The p-value for Mammal and Reptile: 0.0383555902297
# pval < 0.05 - Significant difference


#Observations DataFrame
observations = pd.read_csv('observations.csv')
print(observations.head())


#In Search of Sheep
sheep_lambda = lambda x: True \
	if 'Sheep' in x \
	else False
species['is_sheep'] = species.common_names.apply(sheep_lambda)
species_is_sheep = species[species.is_sheep == True]
print(species_is_sheep)
sheep_species = species[(species.is_sheep == True) &
                        (species.category == 'Mammal')]
print(sheep_species)


#Merging Sheep and Observation DataFrames
sheep_observations = pd.merge(sheep_species, observations)
print(sheep_observations.head())
#How many total sheep sightings (across all three species) were made at each national park?
obs_by_park = sheep_observations.groupby('park_name').observations.sum().reset_index()
print(obs_by_park)


#Plotting Sheep Sightings
plt.figure(figsize=(16, 4))
ax = plt.subplot()
plt.bar(range(len(obs_by_park.park_name)), obs_by_park.observations)
ax.set_xticks(range(len(obs_by_park.park_name)))
ax.set_xticklabels(obs_by_park.park_name)
plt.ylabel('Number of Observations')
plt.title('Observations of Sheep per Week')
plt.show()

#Foot and Mouth Reduction Effort - Sample Size Determination
baseline = 15
minimum_detectable_effect = 33
sample_size_per_variant = 890

yellowstone_weeks_observing = sample_size_per_variant / 507.
print(yellowstone_weeks_observing)
#1.76 weeks

bryce_weeks_observing = sample_size_per_variant / 250.
print(bryce_weeks_observing)
#3.56 weeks



